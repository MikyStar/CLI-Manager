#!/usr/bin/env node

(()=>{"use strict";var t={807:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=s(290),i=s(50),n=s(418),o=r(s(598)),l=s(307),c=s(571),d=s(609),h=s(196);try{const t=new l.MainController,{argHandler:e,printer:s}=t,{words:r,infos:i}=e,[o]=r,{isThereCLIArgs:c,isThereCliFlagCommand:d,isThereOnlyOneCLIArgs:u}=i;if(c||d||(s.setView("full").printView(),n.System.exit()),u&&(0,a.isTask)(o)){const t=o.value;s.setView("specific",t).printView(),n.System.exit()}(0,a.isAction)(o)&&(new h.ActionHandler(t),n.System.exit())}catch(t){t instanceof d.CatchableError?t instanceof c.CLISyntaxError?((0,i.printError)(t.message),(0,i.printMessage)(o.default.getMan(t.manEntry))):(0,i.printError)(t.message):console.error(t),n.System.exit(-1)}},196:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ActionHandler=void 0;const r=s(50),a=s(159),i=s(798),n=s(148),o=s(571),l=s(290),c=s(313);e.ActionHandler=class{constructor(t){this.mainController=t;const{argHandler:e,storage:s,config:d,printer:h,finalStorageLocation:u}=this.mainController,{words:g,flags:p,infos:f}=e,{dataAttributes:k,isRecursive:E}=p,{state:T,description:y,priority:m}=k,{isThereOnlyOneCLIArgs:b}=f,[A,v,_]=g;if(!s)throw new o.StorageError(`Can't find the task storage file '${u}'`);switch(A.value){case l.Action.ADD_TASK:{let t;if(b)t=a.Prompt.addTask(s);else{const r=new n.Task({name:e.getFirstText(),state:T||s.meta.states[0].name,description:y,priority:m});let a;if((0,l.isTask)(v)){const t=v.value;a=t,h.setView("specific",t)}else h.setView("full");t=s.addTask(r,a)}h.addFeedback(`Task n°${t} added`).print();break}case l.Action.EDIT:{if(!(0,l.isTask)(v))throw new o.EditingSyntaxError("Your second arguments should be one or more tasks id join by ',' or a board name");const t=e.getFirstText();if((0,l.isTask)(v)){const e={name:t,state:T,description:y,priority:m};t||delete e.name,T||delete e.state,y||delete e.description,m||delete e.priority;const{ids:r,textID:a,textTask:i}=(0,c.idsController)(s,v.value);s.editTask(r,e,E),h.addFeedback(`${i} '${a}' edited`).setView("specific",r)}h.print();break}case l.Action.CHECK:{if(!(0,l.isTask)(v))throw new o.CheckingTaskSyntaxError("Your second arguments should be a number or numbers join by ','");const{ids:t,textID:e,textTask:r}=(0,c.idsController)(s,v.value),a=s.meta.states[s.meta.states.length-1].name;s.editTask(t,{state:a},E),h.addFeedback(`${r} '${e}' checked`).setView("specific",t).print();break}case l.Action.INCREMENT:{if(!(0,l.isTask)(v))throw new o.IncrementingTaskSyntaxError(`Second arg '${v.value}' should be one or more task`);const{ids:t,textID:e,textTask:r}=(0,c.idsController)(s,v.value);s.incrementTask(t,E),h.addFeedback(`${r} '${e}' incremented`).setView("specific",t).print();break}case l.Action.DELETE:{if(!(0,l.isTask)(v))throw new o.DeletingTaskSyntaxError(`Second arg '${v.value}' should be one or more task`);const{ids:t,textID:e,textTask:r}=(0,c.idsController)(s,v.value);if(Array.isArray(t)&&t.length>1)h.setView("full");else{let e;s.tasks.retrieveTask(t[0],(({parentTask:t})=>e=t)),h.setView(e?"specific":"full",e?e.id:void 0)}s.deleteTask(t),h.addFeedback(`${r} '${e}' deleted`).print();break}case l.Action.MOVE:{if(!(0,l.isTask)(v))throw new o.MovingTaskSyntaxError(`Second arg '${v.value}' should be one or more task id`);if(!(0,l.isTask)(_))throw new o.MovingTaskSyntaxError(`Third arg '${_.value}' should be one task id`);if(Array.isArray(_.value))throw new o.MovingTaskSyntaxError("Please provide only one destination task id");const{ids:t,textID:e,textTask:r}=(0,c.idsController)(s,v.value),a=_.value;s.moveTask(t,a),h.setView("specific",a),h.addFeedback(`${r} '${e}' moved to task n°${a}`).print();break}case l.Action.EXTRACT:{if(!(0,l.isTask)(v))throw new o.ExtractSyntaxError(`Second arg '${v.value}' should be one or more task id`);if(!(0,l.isText)(_))throw new o.ExtractSyntaxError(`Thrid arg '${_.value}' should be text`);const{tasks:t,textID:a,textTask:n}=(0,c.idsController)(s,v.value),h=_.value,u=i.StorageFactory.extract(h,s,t),g=r.PrinterFactory.create(e,d,u);g.setView("full"),g.addFeedback(`${n} '${a}' extracted to ${h}`).print();break}}}}},290:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.isText=e.isAction=e.isTask=e.CliArgHandler=e.ValueFlag=e.OnOffFlag=e.BooleanFlag=e.Action=void 0;const r=s(852),a=s(94),i=s(571);var n,o,l,c;!function(t){t.CREATE_STORAGE="storage",t.CREATE_CONFIG="config",t.ADD_TASK="a",t.CHECK="c",t.DELETE="d",t.EDIT="e",t.INCREMENT="i",t.MOVE="mv",t.EXTRACT="x"}(n=e.Action||(e.Action={})),function(t){t.HELP="--help",t.VERSION="--version",t.RECURSIVE="-r",t.HIDE_TREE="--hide-tree",t.HIDE_TIMESTAMP="--hide-timestamp",t.HIDE_SUB_COUNTER="--hide-sub-counter"}(o=e.BooleanFlag||(e.BooleanFlag={})),function(t){t.HIDE_DESCRIPTION="--hide-description",t.SHOW_DESCRIPTION="--show-description",t.DONT_PRINT_AFTER="--no-print",t.DO_PRINT_AFTER="--print",t.CLEAR_BEFORE="--clear",t.DONT_CLEAR_BEFORE="--no-clear",t.HIDE_COMPLETED="--hide-completed",t.SHOW_COMPLETED="--show-completed"}(l=e.OnOffFlag||(e.OnOffFlag={})),function(t){t.STORAGE_FILE="--storage",t.DEPTH="--depth",t.GROUP_BY="--group",t.SORT="--sort",t.STATE="-s",t.DESCRIPTION="-d",t.TAG="-t"}(c=e.ValueFlag||(e.ValueFlag={})),e.CliArgHandler=class{constructor(){this.getFirstText=()=>{let t;return this.untreatedArgs.forEach(((e,s)=>{"text"===e.type&&void 0===t&&(t=e.value,this.untreatedArgs.splice(s,1))})),t},this.getPrinterConfig=()=>{const t=this.getBoolFlag(o.HIDE_TIMESTAMP),e=this.getBoolFlag(o.HIDE_TREE),s=this.getBoolFlag(o.HIDE_SUB_COUNTER),r=this.getValueFlag(c.DEPTH),a=this.getValueFlag(c.GROUP_BY),i=this.getValueFlag(c.SORT);return{hideDescription:this.handleOnOffFlags(l.HIDE_DESCRIPTION),hideTimestamp:t,hideSubCounter:s,hideTree:e,hideCompleted:this.handleOnOffFlags(l.HIDE_COMPLETED),shouldNotPrintAfter:this.handleOnOffFlags(l.DONT_PRINT_AFTER),clearBefore:this.handleOnOffFlags(l.CLEAR_BEFORE),depth:r,group:a,sort:i}},this.handleOnOffFlags=t=>{const e=[l.HIDE_DESCRIPTION,l.SHOW_DESCRIPTION,l.HIDE_COMPLETED,l.SHOW_COMPLETED,l.DONT_PRINT_AFTER,l.DO_PRINT_AFTER,l.CLEAR_BEFORE,l.DONT_CLEAR_BEFORE],s=e.findIndex((e=>e===t)),r=e[s+(s%2==0?1:-1)],a=this.extractOccurances((e=>"flag"===e.type&&(e.flagType===t||e.flagType===r)));if(void 0!==a)return a[a.length-1].arg.flagType===t},this.extractOccurances=t=>{const e=[];if(this.untreatedArgs.forEach(((s,r)=>{t(s,r)&&e.push({arg:s,index:r})})),0!==e.length){for(let t=e.length-1;t>=0;t--)this.untreatedArgs.splice(e[t].index,1);return e}},this.getDataAttributes=()=>({state:this.getValueFlag(c.STATE),description:this.getValueFlag(c.DESCRIPTION),priority:this.getPriority()}),this.rawParse=t=>{var e;const s=[],a=t=>!isNaN(parseInt(t))&&!isNaN(parseFloat(t));for(let d=0;d<t.length;d++){const h=t[d],u=/\s/.test(h);if(h.includes(",")&&!u){const{subParsed:t,argType:e}=this.handleMultipleValuesType(h),r=t.map((t=>t.value));s.push({value:r,type:e})}else{const u=a(h),g=Object.values(n).includes(h),p=Object.values(o).includes(h),f=Object.values(l).includes(h),k=Object.values(c).includes(h),E=h===c.GROUP_BY,T=1===(null===(e=h.match(/^!+$/))||void 0===e?void 0:e.length)||!1;if(u)s.push({value:Number.parseInt(h),type:"task"});else if(g)s.push({value:h,type:"action"});else if(p)s.push({value:!0,type:"flag",flagType:h});else if(f)s.push({value:!0,type:"flag",flagType:h});else if(k){const e=t[d+1];let n;if(E&&!r.handledGroupings.includes(e))throw new i.GroupBySyntaxError(`'--group' following attribute should be from '${r.handledGroupings.map((t=>t))}'`);n=a(e)?Number.parseInt(e):e,s.push({value:n,type:"flag",flagType:h}),d++}else T?s.push({value:h.length,type:"priority"}):s.push({value:h,type:"text"})}}return s},this.handleMultipleValuesType=t=>{const e=t.split(","),s=this.rawParse(e);let r;return s.forEach((t=>{if(void 0===r)r=t.type;else if(t.type!==r)throw new a.MultipleValuesMismatchError(r,t.type)})),{subParsed:s,argType:r}},this.getBoolFlag=t=>{if(void 0!==this.extractOccurances((e=>"flag"===e.type&&e.flagType===t&&!0===e.value)))return!0},this.getValueFlag=t=>{const e=this.extractOccurances((e=>"flag"===e.type&&e.flagType===t&&void 0!==e.value));if(void 0!==e)return e[e.length-1].arg.value},this.getPriority=()=>{const t=this.extractOccurances((t=>"priority"===t.type&&void 0!==t.value));if(void 0!==t)return t[t.length-1].arg.value},this.untreatedArgs=this.rawParse(process.argv.slice(2)),this.flags={printing:this.getPrinterConfig(),dataAttributes:this.getDataAttributes(),storageLocation:this.getValueFlag(c.STORAGE_FILE),isRecursive:this.getBoolFlag(o.RECURSIVE),isHelpNeeded:this.getBoolFlag(o.HELP),isVersion:this.getBoolFlag(o.VERSION)},this.words=[...this.untreatedArgs];const{isHelpNeeded:t,isVersion:e}=this.flags;this.infos={isThereCliFlagCommand:t||e,isThereCLIArgs:this.words.length>0,isThereOnlyOneCLIArgs:1===this.words.length}}},e.isTask=t=>"task"===t.type,e.isAction=t=>"action"===t.type,e.isText=t=>"text"===t.type},313:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.idsController=void 0,e.idsController=(t,e)=>{const s=[];let r="",a="Task";const i=[];return Array.isArray(e)?(a="Tasks",e.forEach(((t,s)=>r+=`${t}${s!==e.length-1?",":""}`)),s.push(...e)):(a="Task",r=`${e}`,s.push(e)),s.map((e=>i.push(t.get(e)))),{ids:s,tasks:i,textID:r,textTask:a}}},307:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.MainController=void 0;const a=s(50),i=s(798),n=s(847),o=s(418),l=r(s(598)),c=s(571),d=s(290);e.MainController=class{constructor(){var t;this.handleFlagCommandArgs=()=>{const t=new a.Printer,{flags:e,infos:s,words:r}=this.argHandler,[i]=r,{isHelpNeeded:n,isVersion:c}=e,{isThereCliFlagCommand:h,isThereOnlyOneCLIArgs:u}=s;h&&(n?u&&(0,d.isAction)(i)?t.addFeedback(l.default.handleAction(i.value)).printFeedback():t.addFeedback(l.default.fullMan()).printFeedback():c&&t.addFeedback(l.default.version).printFeedback(),o.System.exit())},this.handleCreatingFiles=()=>{const{words:t}=this.argHandler,[e,s]=t,r=t.length>0&&(0,d.isAction)(e)&&e.value===d.Action.CREATE_STORAGE,h=t.length>0&&(0,d.isAction)(e)&&e.value===d.Action.CREATE_CONFIG;if(h||r){const t=new a.Printer;if(h){if(o.System.doesFileExists(n.DEFAULT_CONFIG_FILE_NAME))throw new c.ConfigError(`Config file '${n.DEFAULT_CONFIG_FILE_NAME}' already exists`);o.System.writeJSONFile(n.DEFAULT_CONFIG_FILE_NAME,n.DEFAULT_CONFIG_DATAS),t.addFeedback(`Config file '${n.DEFAULT_CONFIG_FILE_NAME}' created`)}else if(r){const e=(null==s?void 0:s.value)||i.DEFAULT_STORAGE_FILE_NAME;if(o.System.doesFileExists(e))throw new c.StorageError(`Storage file '${e}' already exists`);i.StorageFactory.init(e),t.addFeedback(`Storage file '${e}' created`)}t.printFeedback(),o.System.exit()}0===this.argHandler.words.length&&(o.System.doesFileExists(this.finalStorageLocation)||((new a.Printer).addFeedback("Go ahead and create a storage file !\n").addFeedback(l.default.getMan("createStorage")).printFeedback(),o.System.exit()))},this.argHandler=new d.CliArgHandler,this.handleFlagCommandArgs(),o.System.doesFileExists(n.DEFAULT_CONFIG_FILE_NAME)&&(this.config=new n.Config(n.DEFAULT_CONFIG_FILE_NAME)),this.finalStorageLocation=this.argHandler.flags.storageLocation||(null===(t=this.config)||void 0===t?void 0:t.storageFile)||i.DEFAULT_STORAGE_FILE_NAME,this.handleCreatingFiles(),o.System.doesFileExists(this.finalStorageLocation)&&(this.storage=new i.Storage(this.finalStorageLocation)),this.printer=a.PrinterFactory.create(this.argHandler,this.config,this.storage)}}},847:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Config=e.DEFAULT_CONFIG_DATAS=e.DEFAULT_CONFIG_FILE_NAME=void 0;const r=s(418),a=s(798);e.DEFAULT_CONFIG_FILE_NAME="task.config.json",e.DEFAULT_CONFIG_DATAS={storageFile:a.DEFAULT_STORAGE_FILE_NAME,group:"state",sort:"desc",shouldNotPrintAfter:!1,hideCompleted:!1,hideDescription:!1,hideTree:!1,clearBefore:!1},e.Config=class{constructor(t){this.relativePath=t;const e=r.System.readJSONFile(this.relativePath);Object.assign(this,e)}}},598:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const a=r(s(22)),i=r(s(314)),n=s(290),o=s(847),l=s(798),c=s(852);e.default=new class{constructor(){this.getMan=t=>this.makeMan(Object.assign(Object.assign({},this[t]),{footer:!0})),this.fullMan=()=>{let t=[];return["createStorage","createConfig","viewing","creatingTask","editing","incrementingTask","checkingTask","movingTask","deleting","extracting"].forEach((e=>{const s=this.makeMan(Object.assign(Object.assign({},this[e]),{footer:!1,globalArgs:!1}));t=[...t,...s,"","-----"]})),[...t,...this.globalArgs,...this.footer]},this.handleAction=t=>{let e=[];switch(t){case n.Action.CREATE_STORAGE:e=this.getMan("createStorage");break;case n.Action.CREATE_CONFIG:e=this.getMan("createConfig");break;case n.Action.ADD_TASK:e=this.getMan("creatingTask");break;case n.Action.DELETE:e=this.getMan("deleting");break;case n.Action.CHECK:e=this.getMan("checkingTask");break;case n.Action.INCREMENT:e=this.getMan("incrementingTask");break;case n.Action.EDIT:e=this.getMan("editing");break;case n.Action.MOVE:e=this.getMan("movingTask");break;case n.Action.EXTRACT:e=this.getMan("extracting")}return e},this.makeMan=t=>{const{bold:e,underline:s}=a.default;let r=[];return t.title&&(r=[...r,s(t.title),""]),t.prototype&&(r=[...r,e(t.prototype),""]),t.argDef&&(r=[...r,...t.argDef]),t.furtherDescription&&(r=[...r,"",...t.furtherDescription]),t.examples&&(r=[...r,"",s("Examples :"),"",...t.examples]),t.globalArgs&&(r=[...r,...this.globalArgs]),r};const{bold:t,underline:e,italic:s}=a.default;this.globalArgs=["",e("Global arguments:"),"",s("They can either be passed by CLI arguments, or set through the config file"),"",`--storage <relative path> : The specific storage file to use if path different than default ${t(l.DEFAULT_STORAGE_FILE_NAME)}`,"--depth <n> : Print every tasks and also n levels of subtasks",`--group <(${c.handledGroupings.map((t=>t))})> : Group by attribute`,`--sort <(${c.handledOrder.map((t=>t))})> : Sort order`,`--hide-description : Hide tasks descriptions ; ${t("'hideDescription' in the config file")}`,"--show-description : Bypass the 'hideDescription' argument in config file",`--hide-tree : Hide tree branches ; ${t("'hideTree' in the config file")}`,`--hide-timestamp : No timestamp ; ${t("'hideTimestamp' in the config file")}`,`--hide-completed : Don't display completed tasks ; ${t("'hideCompleted' in the config file")}`,"--show-completed : Bypass the 'shouldNotPrintAfter' argument in config file","--hide-sub-counter : No subtask counter in parent task",`--no-print : Prevent printing your tasks after having ran your command ; ${t("'shouldNotPrintAfter' in the config file")}`,"--print : Bypass the 'shouldNotPrintAfter' argument in config file",`--clear : Clear the terminal before printing ; ${t("'clearBefore' in the config file")}`,"--no-clear : Bypass the 'clearBefore' argument in the config file"],this.footer=["","-----",`${t(i.default.name)}: ${i.default.description}`,`Version: ${t(i.default.version)}`,`More informations and examples at ${t(i.default.repository.url)}`],this.version=[`${i.default.version}`],this.createStorage={title:"Creating storage file",prototype:"task storage [<relative path>]",argDef:[`<relative path> : If you want to change the path, default ${t(l.DEFAULT_STORAGE_FILE_NAME)}`]},this.createConfig={title:"Creating the config file",prototype:"task config",furtherDescription:[`It will create a ${t(o.DEFAULT_CONFIG_FILE_NAME)}`,`You don't need to have a configuration file, it's used to pass default ${t("global arguments")} to the CLI, see section below.`],globalArgs:!0},this.viewing={title:"Viewing",prototype:"task [<task(s)>] [global args]",argDef:["<task(s)> : The id of the task you want to display, you can pass multiple by separating the ids by ',' without space"],globalArgs:!0},this.creatingTask={title:"Creating a task",prototype:"task a [<task>] [<task name>] [-d <description>] [-s <state>] [global args]",argDef:["<task> : Task id uppon which you want to add a child subtask","<name> : Task name","-d <description> : Task description","-s <state> : Task state defined by the config file"],furtherDescription:["If no args are provided after 'a' you will enter interactive mode to create your task"],globalArgs:!0},this.editing={title:"Editing",prototype:"task e <task(s)> [<new name>] [-d <description>] [-s <state>] [global args]",argDef:["<task(s)> : The id of the task you want to edit, you can pass multiple by separating the ids by ',' without space","<new name> : Edit task name","-d <description> : Edit task description","-s <state> : Edit task state defined by the config file"],furtherDescription:["If no args are provided after 'e' you will enter interactive mode to edit your task"],globalArgs:!0},this.checkingTask={title:"Checking task",prototype:"task c <task(s)> [-r] [global args]",argDef:["<task(s)> : The id of the task you want to change, you can pass multiple by separating the ids by ',' without space","-r: Also update target task's subtasks, 'recursive'"],furtherDescription:["Will put tasks to the final state (last index in config file)"],globalArgs:!0},this.incrementingTask={title:"Incrementing task",prototype:"task i <task(s)> [-r] [global args]",argDef:["<task(s)> : The id of the task you want to increment, you can pass multiple by separating the ids by ',' without space","-r: Also update target task's subtasks, 'recursive'"],furtherDescription:["Will put tasks to the next state (next index in config file)"],globalArgs:!0},this.movingTask={title:"Moving task",prototype:"task mv <target task(s)> [<task id dest>] [global args]",argDef:["<target task(s)> : The id of the task you want to move, you can pass multiple by separating the ids by ',' without space","<task id dest> : The id of the target task"],globalArgs:!0},this.deleting={title:"Deleting",prototype:"task d <task(s)>",argDef:["<task(s)> : The id of the task you want to remove, you can pass multiple by separating the ids by ',' without space"],globalArgs:!0},this.extracting={title:"Extracting",prototype:"task x <task(s)> <relative path>",argDef:["<task(s)> : The id of the task you want to extract, you can pass multiple by separating the ids by ',' without space","<relative path> : Path of the new storage file"],globalArgs:!0}}}},50:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.printError=e.printMessage=e.PrinterFactory=e.Printer=void 0;const a=r(s(22)),i=s(852),n=s(798),o=r(s(598));class l{constructor(t,s){this.setView=(t,e)=>(this.viewParams={view:t,target:e},this),this.addFeedback=t=>{const e=Array.isArray(t)?t:[t];return this.feedback=[...this.feedback,...e],this},this.cloneStorage=()=>{const{group:t,sort:e}=this.config,s=new n.Storage(this.storage.relativePath);return t&&(s.group(t),e&&s.order(e)),s},this.getSpecificView=t=>{let e=[];const s=Array.isArray(t)?t:[t],r=new i.TaskList;return s.forEach(((t,a)=>{this.cloneStorage().tasks.retrieveTask(t,(({task:t})=>{r.push(t),e=[...e,...t.stringify(this.storage.meta.states,Object.assign(Object.assign({},this.config),{hideCompleted:!1})),""],a!==s.length-1?e.push(this.separator("-"),""):e.push(r.getStats(this.storage.meta),"")}))})),e=[...e,...this.getFileStats()],e},this.getFullView=()=>{const t=[];return this.cloneStorage().tasks.forEach((e=>t.push(...e.stringify(this.storage.meta.states,this.config)))),t.push("",...this.getFileStats()),t},this.getView=()=>{if(!this.viewParams)return[];if(0===this.storage.tasks.length)return[a.default.bold("Your storage file is empty"),"",...o.default.getMan("creatingTask")];switch(this.viewParams.view){case"full":return this.getFullView();case"specific":return this.getSpecificView(this.viewParams.target)}},this.print=()=>{let t=[];if(t.push(this.charAccrossScreen("-"),""),this.config.shouldNotPrintAfter){if(0===this.feedback.length)return;t=[...t,...this.feedback,this.charAccrossScreen("-")]}else{if(0===this.feedback.length&&this.viewParams)return;t=[...t,...this.getView(),this.charAccrossScreen("-"),"",...this.feedback]}this.printMessage(t)},this.printView=()=>{const t=[this.charAccrossScreen("-"),"",...this.getView(),"",this.charAccrossScreen("-")];this.printMessage(t)},this.printFeedback=()=>this.printMessage(["",...this.feedback]),this.printMessage=t=>{const s=this.config&&this.config.clearBefore||!1;(0,e.printMessage)(t,s)},this.getFileStats=()=>{const t=a.default.bold.underline(this.storage.relativePath),e=this.storage.tasks.getStats(this.storage.meta);return[this.separator("-"),""," "+t,"",e,""]},this.charAccrossScreen=t=>{let e="";for(let s=0;s<process.stdout.columns-2;s++)e+=t;return e+" "},this.separator=t=>{let e="";for(let s=0;s<process.stdout.columns/10;s++)e+=t;return e},this.feedback=[],this.config=s||{},this.storage=t}}e.Printer=l,e.PrinterFactory={create:(t,e,s)=>{const{flags:r}=t,{printing:a}=r,i=Object.assign({},e);for(const[t,e]of Object.entries(a))void 0!==a[t]&&(i[t]=e);return new l(s,i)}},e.printMessage=(t,e,s)=>{""===t||Array.isArray(t)&&0===t.length||(e&&console.clear(),t=Array.isArray(t)?t:[t],console.log(""),t.forEach((t=>{let e=" "+t;e=s?a.default[s](e):e,console.log(e)})),console.log(""))},e.printError=(t,s)=>(0,e.printMessage)(t,s,"red")},159:function(t,e,s){var r=this&&this.__awaiter||function(t,e,s,r){return new(s||(s=Promise))((function(a,i){function n(t){try{l(r.next(t))}catch(t){i(t)}}function o(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(n,o)}l((r=r.apply(t,e||[])).next())}))},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Prompt=void 0;const i=a(s(650)),n=s(148);!function(t){t.addTask=t=>r(this,void 0,void 0,(function*(){const e=[];t.meta.states.forEach((t=>{return e.push({title:s=t.name,value:s});var s}));try{const s=yield(0,i.default)([{type:"text",name:"name",message:"Task name"},{type:"select",name:"state",message:"State",choices:e},{type:"text",name:"description",message:"Description"}]),r=new n.Task({name:s.name,state:s.state,description:s.description});return t.addTask(r)}catch(t){console.warn("No task added")}}))}(e.Prompt||(e.Prompt={}))},798:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.StorageFactory=e.Storage=e.DEFAULT_STORAGE_DATAS=e.DEFAULT_STORAGE_FILE_NAME=void 0;const r=s(849),a=s(275),i=s(852),n=s(418);e.DEFAULT_STORAGE_FILE_NAME="tasks.json",e.DEFAULT_STORAGE_DATAS={meta:{states:[{name:"todo",hexColor:"#ff8f00",icon:"☐"},{name:"wip",hexColor:"#ab47bc",icon:"✹"},{name:"done",hexColor:"#66bb6a",icon:"✔"}]},datas:[{name:"Add more stuff",description:"Run 'task d 0' to delete me or 'task c 0' to check me",state:"todo",id:0}]};class o{constructor(t){this.addTask=(t,e)=>{const s=this.tasks.addTask(t,e);return this.save(),s},this.editTask=(t,e,s)=>{const r=this.tasks.editTask(t,e,s);return this.save(),r},this.incrementTask=(t,e)=>{const s=this.tasks.incrementTask(t,this.meta,e);return this.save(),s},this.deleteTask=t=>{const e=this.tasks.deleteTask(t);return this.save(),e},this.moveTask=(t,e)=>{const s=this.tasks.moveTask(t,e);return this.save(),s},this.group=(t="state")=>this.tasks.group(t,this.meta),this.order=t=>"desc"===t&&this.tasks.reverse(),this.get=t=>{let e;if(this.tasks.retrieveTask(t,(({task:t})=>e=t)),void 0===e)throw new a.TaskNotFoundError(t);return e},this.save=()=>n.System.writeJSONFile(this.relativePath,{meta:this.meta,datas:this.tasks}),this.relativePath=t;const{meta:e,datas:s}=n.System.readJSONFile(this.relativePath);this.tasks=new i.TaskList(s),this.meta=e}}e.Storage=o,e.StorageFactory={init:t=>{if(n.System.doesFileExists(t))throw new r.FileAlreadyExistsError(t);return n.System.writeJSONFile(t,e.DEFAULT_STORAGE_DATAS),new o(t)},extract:(t,e,s)=>{if(n.System.doesFileExists(t))throw new r.FileAlreadyExistsError(t);const a={meta:e.meta,datas:s};return n.System.writeJSONFile(t,a),s.forEach((t=>e.deleteTask([t.id]))),new o(t)}}},418:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.System=void 0;const a=r(s(147)),i=r(s(17)),n=s(849);var o;(o=e.System||(e.System={})).exit=(t=0)=>process.exit(t),o.getAbsolutePath=t=>i.default.isAbsolute(t)?t:i.default.join(process.cwd(),t),o.readJSONFile=t=>{let e,s={};try{e=a.default.readFileSync(o.getAbsolutePath(t),{encoding:"utf8",flag:"r"})}catch(e){throw new n.FileNotFoundError(t,e)}try{s=JSON.parse(e)}catch(e){throw new n.JSONParseError(t,e)}return s},o.doesFileExists=t=>a.default.existsSync(o.getAbsolutePath(t))||!1,o.writeJSONFile=(t,e)=>{try{a.default.writeFileSync(o.getAbsolutePath(t),JSON.stringify(e,null,4))}catch(e){throw new n.SaveFileError(t,e)}}},148:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Task=e.TIMESTAMP_FORMAT=void 0;const a=r(s(22));e.TIMESTAMP_FORMAT="DD/MM/YYYY";class i{constructor(t){this.straightTask=()=>{const t=[];return this.subtasks&&0!==this.subtasks.length?(this.subtasks.forEach((e=>{const s=e.straightTask();t.push(...s)})),t.push(this),t):(t.push(this),t)},this.stringify=(t,e)=>{const s="    ",r=1,i={node:"├── ",lastNode:"└── ",branch:"│   "},n={node:a.default.grey(i.node),lastNode:a.default.grey(i.lastNode),branch:a.default.grey(i.branch)},{parentIndent:o,subTaskLevel:l=r,isSubTask:c,isLastChild:d,hideDescription:h,depth:u,isLastParent:g,hideCompleted:p,hideTree:f}=e;let k=[],E=o||"";const T=this.state===t[t.length-1].name,y=t.filter((t=>this.state===t.name))[0],m=a.default.hex(y.hexColor)(`${this.id}.`);if(p&&T)return k;c&&(f?E+=s:(function(){const t=E.lastIndexOf(n.node);t>=0&&t+n.branch.length>=E.length&&(E=E.substring(0,t)+n.branch)}(),g&&(E=E.split(i.lastNode).join(s)),E+=d?n.lastNode:n.node));const b=a.default.hex(y.hexColor)(y.icon),A=T?a.default.strikethrough.grey(this.name):this.name,v=this.priority?a.default.bold.red(" "+(()=>{let t="";for(let e=0;e<this.priority;e++)t+="!";return t})()):"",_=`${m}\t${E}${b}`+v+` ${A}`;if(k.push(_),!h){const t=()=>{if(!this.description)return[];const t=[];return this.description.split("\n").forEach((e=>{e=T?a.default.grey.strikethrough(e):a.default.dim(e);const r=f?s:n.branch,o=`\t${(()=>{let t=E;const{node:e,branch:r,lastNode:a}=i;let n,o;return E.match(e)?(n=e,o=r):E.match(a)&&(n=a,o=s),!f&&n&&o&&(t=E.split(n).join(o)),t})()}${r}  ${e}`;t.push(o)})),t};k=[...k,...t()]}return this.subtasks&&0!==this.subtasks.length?(this.subtasks.forEach(((s,r)=>{if(!(void 0!==u&&l>=u+1)){const a=r===this.subtasks.length-1,i=Object.assign(Object.assign({},e),{subTaskLevel:l+1,parentIndent:E,isLastChild:a,isSubTask:!0,isLastParent:d}),n=s.stringify(t,i);k=[...k,...n]}})),k):k},Object.assign(this,t),t.subtasks&&0!==t.subtasks.length?this.subtasks=t.subtasks.map((t=>new i(t))):delete this.subtasks}}e.Task=i},852:function(t,e,s){var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.TaskList=e.handledOrder=e.handledGroupings=void 0;const a=r(s(22)),i=r(s(245)),n=s(275),o=s(148);e.handledGroupings=["state","priority","id"],e.handledOrder=["asc","desc"],e.TaskList=class extends Array{constructor(t){super(),this.remove=t=>{const e=this.allIDs.findIndex((e=>e===t.id));this.allIDs.splice(e,1);let s=this.indexOf(t);if(s>-1){const e=this.length-1;for(;s<e;)this[s]=this[s+1],++s;return this.length=e,[t]}return[]},this.push=(...t)=>(t.forEach((t=>{t.straightTask().map((t=>t.id)).forEach((t=>{if(this.allIDs.includes(t))throw new n.TaskIdDuplicatedError(t);this.allIDs.push(t)})),super.push(t)})),this.length),this.addTask=(t,e)=>{const s=t.id&&!this.allIDs.includes(t.id)?t.id:(()=>{if(Math.max(...this.allIDs)===this.allIDs.length-1)return this.allIDs.length;{let t=0;for(;this.allIDs.includes(t);)t++;return t}})();return t.id=s,t.timestamp=(0,i.default)().format(o.TIMESTAMP_FORMAT),void 0!==e?this.retrieveTask(e,(({task:e})=>{void 0===e.subtasks?e.subtasks=[t]:e.subtasks=[...e.subtasks,t],this.allIDs.push(s)})):this.push(t),s},this.editTask=(t,e,s)=>(t.forEach((t=>{this.retrieveTask(t,(({task:t})=>{const r=s?t.straightTask():[t];for(const[t,s]of Object.entries(e))r.forEach((e=>e[t]=s))}))})),t),this.incrementTask=(t,e,s)=>{const{states:r}=e,a=r.map((t=>t.name)),i=t=>{const e=a.indexOf(t.state);if(-1===e)throw new n.TaskStateUnknownError(t.id,t.state);if(e===a.length-1)throw new n.NoFurtherStateError(t.id);this.editTask([t.id],{state:a[e+1]},s)};return t.forEach((t=>{this.retrieveTask(t,(({task:t})=>{i(t)}))})),t},this.deleteTask=t=>(t.forEach((t=>{let e=!1;if(this.forEach((s=>{if(s.id===t)e=!0,this.remove(s);else if(Array.isArray(s.subtasks)&&0!==s.subtasks.length){const r=(a,i)=>{a.id===t?(e=!0,s.subtasks.splice(i,1)):Array.isArray(a.subtasks)&&0!==a.subtasks.length&&a.subtasks.forEach(r)};s.subtasks.forEach(r)}})),!e)throw new n.TaskNotFoundError(t)})),t),this.moveTask=(t,e)=>(t.forEach((t=>this.retrieveTask(t,(({task:s})=>{this.deleteTask([t]),this.addTask(s,e)})))),t),this.retrieveTask=(t,e)=>{let s,r=!1;const a=(i,n)=>{if(i.id===t)return r=!0,e({task:i,taskIndex:n,parentTask:s});Array.isArray(i.subtasks)?(s=i,i.subtasks.forEach(a)):s=void 0};if(this.forEach(a),!r)throw new n.TaskNotFoundError(t)},this.search=(t,e)=>{const s=[];return this.forEach((r=>{r.straightTask().forEach((r=>{r[t]===e&&s.push(r)}))})),s},this.countTaskAndSub=()=>{let t=0;return this.forEach((function e(s){t++,Array.isArray(s.subtasks)&&s.subtasks.forEach(e)})),t},this.getStats=t=>{let e="";const s=this.countTaskAndSub(),{states:r}=t;return r.forEach(((t,i)=>{const n=this.search("state",t.name).length,o=n/s*100,l=isNaN(o)?0:o;0!==i&&i!==r.length&&(e+=" ► ");const c=`${n} ${t.name} (${l.toFixed(0)}%)`;e+=a.default.hex(t.hexColor)(c)})),e+=` ❯ ${s}`,e},this.group=(t,e)=>{let s=(t,e)=>0;switch(t){case"state":{const t=e.states.map((t=>t.name));s=(e,s)=>e.state===s.state?0:t.indexOf(e.state)<t.indexOf(s.state)?-1:1;break}case"priority":s=(t,e)=>void 0!==t.priority&&void 0!==e.priority?t.priority===e.priority?0:t.priority<e.priority?-1:1:void 0===t.priority&&void 0!==e.priority?-1:void 0!==t.priority&&void 0===e.priority?1:0;break;case"id":s=(t,e)=>{if(t.id===e.id)throw new Error("Impossible case : A task id should be unique");return t.id<e.id?-1:1}}this.sort(s)},this.allIDs=[],t&&this.push(...t.map((t=>new o.Task(t))))}}},571:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.ExtractSyntaxError=e.GroupBySyntaxError=e.MovingTaskSyntaxError=e.DeletingTaskSyntaxError=e.EditingSyntaxError=e.IncrementingTaskSyntaxError=e.CheckingTaskSyntaxError=e.AddingTaskSyntaxError=e.ConfigError=e.StorageError=e.CLISyntaxError=void 0;const r=s(609);class a extends r.CatchableError{constructor(t,e,s){super(t,s),this.manEntry=e}}e.CLISyntaxError=a,e.StorageError=class extends a{constructor(t,e){super(t,"createStorage",e)}},e.ConfigError=class extends a{constructor(t,e){super(t,"createConfig",e)}},e.AddingTaskSyntaxError=class extends a{constructor(t,e){super(t,"creatingTask",e)}},e.CheckingTaskSyntaxError=class extends a{constructor(t,e){super(t,"checkingTask",e)}},e.IncrementingTaskSyntaxError=class extends a{constructor(t,e){super(t,"incrementingTask",e)}},e.EditingSyntaxError=class extends a{constructor(t,e){super(t,"editing",e)}},e.DeletingTaskSyntaxError=class extends a{constructor(t,e){super(t,"deleting",e)}},e.MovingTaskSyntaxError=class extends a{constructor(t,e){super(t,"movingTask",e)}},e.GroupBySyntaxError=class extends a{constructor(t,e){super(t,"viewing",e)}},e.ExtractSyntaxError=class extends a{constructor(t,e){super(t,"extracting",e)}}},609:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.CatchableError=void 0;class s extends Error{constructor(t,e){super(t),this.details=e}}e.CatchableError=s},849:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.SaveFileError=e.JSONParseError=e.FileAlreadyExistsError=e.FileNotFoundError=void 0;const r=s(609);class a extends r.CatchableError{constructor(t,e){super(`Can't find ${t}`,e)}}e.FileNotFoundError=a;class i extends r.CatchableError{constructor(t){super(`File ${t} already exists`)}}e.FileAlreadyExistsError=i;class n extends r.CatchableError{constructor(t,e){super(`Problem parsing ${t} to JSON`,e)}}e.JSONParseError=n;class o extends r.CatchableError{constructor(t,e){super(`Problem saving ${t} `,e)}}e.SaveFileError=o},275:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.NoFurtherStateError=e.TaskIdDuplicatedError=e.TaskStateUnknownError=e.TaskNotFoundError=void 0;const r=s(609);class a extends r.CatchableError{constructor(t,e){super(`Task n°${t} not found`,e)}}e.TaskNotFoundError=a;class i extends r.CatchableError{constructor(t,e,s){super(`Task's n°${t} state '${e}' is not defined, you can add it under the 'meta.states' in your tasks data file`,s)}}e.TaskStateUnknownError=i;class n extends r.CatchableError{constructor(t,e){super(`Multiple task has the id '${t}'`,e)}}e.TaskIdDuplicatedError=n;class o extends r.CatchableError{constructor(t,e){super(`Final state already reached for task '${t}'`,e)}}e.NoFurtherStateError=o},94:(t,e,s)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.MultipleValuesMismatchError=void 0;const r=s(609);class a extends r.CatchableError{constructor(t,e,s){super(`Multiple arguments should be of the same type, not ${t} and ${e}`,s)}}e.MultipleValuesMismatchError=a},22:t=>{t.exports=require("chalk")},245:t=>{t.exports=require("moment")},650:t=>{t.exports=require("prompts")},147:t=>{t.exports=require("fs")},17:t=>{t.exports=require("path")},314:t=>{t.exports=JSON.parse('{"name":"cli-task-manager","version":"1.0.2","description":"Providing an easy and usefull command line interface for managing tasks with local files","keywords":["cli","tasks","management"],"author":"Mike AUBENAS","license":"ISC","bin":{"task":"./bin/cli.js"},"files":["src","bin/cli.js"],"main":"src/Main.ts","repository":{"type":"git","url":"https://github.com/MikyStar/CLI-Manager"},"scripts":{"start":"NODE_ENV=dev npm run build && node build/main.js","build":"webpack-cli","make-binary":"./scripts/make-binary.sh","prepublishOnly":"npm run make-binary","lint":"eslint src --ext .ts --fix","prepare":"husky install","security:audit":"npm audit --production --audit-level=moderate --registry=https://registry.npmjs.org","security:fix":"npm audit fix --production --audit-level=moderate --registry=https://registry.npmjs.org","dependencies:check":"ncu -e 2","dependencies:update":"ncu -u && npm run clear && npm install && npm run security:audit","clear":"rm -rf node_modules build bin"},"devDependencies":{"@commitlint/config-conventional":"^17.7.0","@typescript-eslint/eslint-plugin":"^6.5.0","eslint":"^8.48.0","eslint-config-prettier":"^9.0.0","eslint-import-resolver-typescript":"^3.6.0","eslint-plugin-import":"^2.28.1","eslint-plugin-prettier":"^5.0.0","husky":"^8.0.3","tslint":"^5.20.1","typescript":"^4.6.3"},"dependencies":{"@commitlint/cli":"^17.7.1","@types/prompts":"^2.0.14","chalk":"^4.1.2","dotenv":"^16.0.0","moment":"^2.29.3","prompts":"^2.4.2","ts-loader":"^9.2.9","ts-node":"^10.7.0","webpack":"^5.72.0","webpack-cli":"^4.9.2","webpack-node-externals":"^3.0.0"}}')}},e={},s=function s(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,s),i.exports}(807);for(var r in s)this[r]=s[r];s.__esModule&&Object.defineProperty(this,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,